<template>
  <div class="w-full mt-10 p-6">
    <h2 class="text-2xl font-bold mb-4">{{ todoList.name }}</h2>

    <div class="flex flex-col sm:flex-row gap-2 mb-4">
      <input
          id="new-task"
          name="new-task"
          v-model="newItem"
          @keyup.enter="addItem"
          class="flex-1 px-4 py-2 border text-gray-800 border-gray-400 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 md:max-w-xl"
          placeholder="Dodaj zadanie..."
      />

      <button
          @click="addItem"
          class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
      >
        Dodaj zadanie
      </button>
    </div>

    <ul v-if="tasks.length" class="space-y-2">
      <li
          v-for="(item, index) in tasks"
          :key="item.id"
          class="flex justify-between items-center p-2 bg-gray-700 border border-gray-400 rounded-lg shadow-sm relative"
      >
        <!-- Checkbox -->
        <input
            type="checkbox"
            class="mr-3"
            :checked="item.is_done"
            @change="toggleDone(index)"
        />

        <!-- Nazwa zadania -->
        <span class="break-words w-full pr-4" :class="{ 'line-through text-gray-400': item.is_done }">
      {{ item.name }}
    </span>

        <!-- Trzy kropki -->
        <div class="relative">
          <button @click="toggleMenu(index)" class="text-white px-2">
            ...
          </button>

          <!-- Małe menu po kliknięciu -->
          <div v-if="openMenuIndex === index" class="absolute right-0 mt-2 w-24 bg-white text-gray-800 rounded shadow-lg">
            <button @click="editTask(index)" class="block w-full text-left px-4 py-2 hover:bg-gray-200">Edytuj</button>
            <button @click="removeTask(index)" class="block w-full text-left px-4 py-2 hover:bg-gray-200">Usuń</button>
          </div>
        </div>
      </li>
    </ul>


    <p v-else class="text-gray-400">Brak zadań do wyświetlenia.</p>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useAuthStore } from '@/stores/authStore.js'
import { useTodoStore } from '@/stores/todoStore.js'


const authStore = useAuthStore()
const todoStore = useTodoStore()


const newItem = ref('')


const tasks = computed(() => todoStore.todoList?.todo_items || [])

onMounted(async () => {
  if (authStore.isLogged) {
    await todoStore.fetchTodoList(2)
  }
})


async function addItem() {
  if (newItem.value) {
    await todoStore.addTodoItem(newItem.value);
    newItem.value = '';
  }
}



function removeTask(index) {
  tasks.value.splice(index, 1)
}
const openMenuIndex = ref(null)

function toggleMenu(index) {
  if (openMenuIndex.value === index) {
    openMenuIndex.value = null;
  } else {
    openMenuIndex.value = index;
  }
}
async function toggleDone(index) {
  const task = tasks.value[index];
  task.is_done = !task.is_done;
  await todoStore.updateTodoItem(task.id, { is_done: task.is_done });
}

</script>
